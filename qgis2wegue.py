# -*- coding: utf-8 -*-
"""
/***************************************************************************
 qgis2wegue
                                 A QGIS plugin
 Converts a QGIS project into a Wegue configuration file
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-29
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Jakob Miksch
        email                : info@jakobmiksch.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsApplication, QgsMessageLog, QgsProject, QgsCoordinateReferenceSystem, QgsCoordinateTransform

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .qgis2wegue_dialog import qgis2wegueDialog
import os.path

# Import wegue logic
from .WegueConfiguration import WegueConfiguration

import re
from urllib.parse import parse_qs


def center2webmercator(center, qgis_instance):
    """
    Input the center point of the QGIS canvas.
    The QGIS instance object, for computing the source CRS
    and the transformation object.
    Outputs: The Same point in WebMercator(EPSG:3857)
    """

    crs_source = qgis_instance.crs()

    # TODO apparently QgsCoordinateReferenceSystem is deprecated
    # define WebMercator(EPSG:3857)
    crs_destination = QgsCoordinateReferenceSystem(3857)

    # transformation object
    xform = QgsCoordinateTransform(crs_source,
                                   crs_destination,
                                   qgis_instance)

    # forward transformation: src -> dest
    center_3857 = xform.transform(center)
    return center_3857


def scale2zoom(scale):
    """
    Takes the scale from QGIS.
    Computes the zoom level for webmaps.
    Only approximation.
    """

    # Scale to Zoom conversion
    # taken from https://wiki.openstreetmap.org/wiki/Zoom_levels
    scale_dict = {
        500000000: 0,
        250000000: 1,
        150000000: 2,
        70000000: 3,
        35000000: 4,
        15000000: 5,
        10000000: 6,
        4000000	: 7,
        2000000	: 8,
        1000000: 9,
        500000: 10,
        250000: 11,
        150000: 12,
        70000: 13,
        35000: 14,
        15000: 15,
        8000: 16,
        4000: 17,
        2000: 18
    }
    scale_list = scale_dict.keys()

    # get closest scale
    closest_scale = min(scale_list, key=lambda x: abs(x - scale))

    # query respective zoom level
    return scale_dict[closest_scale]


def identify_wegue_layer_type(layer):
    """
    Matches QGIS layer type to Wegue type
    Wegue types:
    - vector
    - wms
    - xyz
    - (osm)
    """

    wegue_layer_type = 'unknown'
    providerType = layer.providerType().lower()
    if providerType == 'wms':
        # Raster layer distinction proudly taken from the great qgis2web
        # project. All creadits to the qgis2web devs
        # https://github.com/tomchadwin/qgis2web
        source = layer.source()
        d = parse_qs(source)
        if "type" in d and d["type"][0] == "xyz":
            wegue_layer_type = 'XYZ'
        elif "tileMatrixSet" in d:
            wegue_layer_type = 'WMTS' # currently not supported in Wegue
        else:
            wegue_layer_type = 'WMS'

    elif providerType == 'ogr':
        # TODO: find out if vector is in "MVT", "GeoJSON", "TopoJSON", "KML"

        name = layer.name()
        url = layer.source().split('|')[0]

        if(url.endswith('.kml')):
            wegue_layer_type = 'KML'
        elif(url.endswith('.json') | url.endswith('.geojson')):
            wegue_layer_type = 'GeoJSON'

    return wegue_layer_type


def get_wms_getmap_url(wmsLayer):
    """
    Detects the Get-Map URL for a QGIS WMS layer
    """

    wms_getmap_url = None

    # derive WMS GetMap URL from layer metdata
    htmlMetadata = wmsLayer.htmlMetadata()
    match = re.search('GetMapUrl<\/td><td>(.*)<\/td><\/tr><tr><td>GetFeatureInfoUrl', htmlMetadata)

    layersGroup = match.groups(0)
    wms_getmap_url = ''.join(layersGroup)

    # use source URL as fallback
    if wms_getmap_url is None:
        wms_getmap_url = re.search(r"url=(.*?)(?:&|$)", source).groups(0)[0]

    return wms_getmap_url


class qgis2wegue:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'qgis2wegue_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QGIS2Wegue')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('qgis2wegue', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/qgis2wegue/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Create a Wegue Configuration'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QGIS2Wegue'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the
        # plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = qgis2wegueDialog()

        # show the dialog
        self.dlg.show()

        # get properties from QGIS project
        canvas = self.iface.mapCanvas()

        scale = canvas.scale()
        center = canvas.center()

        qgis_instance = QgsProject.instance()

        center_3857 = center2webmercator(center, qgis_instance)

        zoom_level = scale2zoom(scale)

        # create Wegue configuration
        wc = WegueConfiguration()

        # add configuration from project
        wc.mapZoom = zoom_level
        wc.mapCenter = (center_3857.x(), center_3857.y())

        # add map layers
        project_layers = qgis_instance.mapLayers()
        for layer_id in project_layers:
            layer = project_layers[layer_id]
            wegue_layer_type = identify_wegue_layer_type(layer)

            if wegue_layer_type in ['GeoJSON', 'KML']:
                name = layer.name()
                url = layer.source().split('|')[0]
                wc.add_vector_layer(name=name,
                                    format=wegue_layer_type,
                                    url=url)

            elif wegue_layer_type == 'WMS':
                source = layer.source()
                layers = re.search(r"layers=(.*?)(?:&|$)", source).groups(0)[0]
                url = get_wms_getmap_url(layer)
                name = layer.name()

                wc.add_wms_layer(name, layers, url)

        wc.add_osm_layer()

        # Run the dialog event loop
        result = self.dlg.exec_()

        # See if OK was pressed
        if result:
            # access file path input widget
            q2w_file_widget = self.dlg.q2w_file_widget

            # TODO: check if path is valid (aka not empty)
            # get the path
            user_input = q2w_file_widget.filePath()

            # write Wegue config to path
            wc.to_file(user_input)
